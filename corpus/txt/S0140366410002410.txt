The study of the modular (or community) structure of complex networks has become a challenging subject [1] with potential applications in many disciplines, ranging from sociology to computer science, see reviews [2], [3], [4]. Understanding the modular units of graphs of interactions (links) between nodes, representing people and their acquaintances, documents and their citation relations, computers and their physical or logical connections, etc., is of utmost importance to grasping knowledge about the functionality and performance of such systems. One of the most successful approaches to identify the underlying modular structure of complex networks, has been the introduction of the quality function called modularity [5], [6]. Modularity encompasses two goals: (i) it implicitly defines modules as those subgraphs that optimize this quantity, and (ii) it provides a quantitative measure to find them via optimization algorithms. It is based on the intuitive idea that random networks are not expected to exhibit modular structure (communities) beyond fluctuations [7].
A lot of effort has been put into proposing reliable techniques to maximize modularity [8], [9], [10], [11], [12], [13], [14], [15], [16], see review [17]. To a large extent, the success of modularity as a quality function to analyze the modular structure of complex networks relies on its intrinsic simplicity. The researcher interested in this analysis is endowed with a non-parametric function to be optimized: modularity. The result of the analysis will provide a partition of the network into communities such that the number of edges within each community is larger than the number of edges one would expect to find by random chance. As a consequence, each community is a subset of nodes more connected between them than with the rest of the nodes in the network. The user has to be aware of some aspects about resolution limitations that avoid grasping the modular structure of networks at low scales using modularity [18]. The problem can be solved using multiresolution methods [19], [20].
The mathematical formulation of modularity was proposed for unweighted and undirected networks [5] and generalized later to weighted [6] and directed networks [21]. The generalized definition is as follows(1)Q(C)=12w∑i=1N∑j=1Nwij-wioutwjin2wδ(Ci,Cj),<math><mi is="true">Q</mi><mo stretchy="false" is="true">(</mo><mi is="true">C</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><mn is="true">2</mn><mi is="true">w</mi></mrow></mfrac><munderover is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><mi is="true">N</mi></mrow></munderover><munderover is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><mi is="true">N</mi></mrow></munderover><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><mo is="true">-</mo><mfrac is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow><mrow is="true"><mn is="true">2</mn><mi is="true">w</mi></mrow></mfrac></mrow></mfenced></mrow><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mtext is="true">,</mtext></math>where wij is the strength of the link between the nodes i and j of the network, wiout=∑jwij<math><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><mo is="true">=</mo><msub is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub></mrow></math> is the strength of links going from i, wjin=∑iwij<math><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup><mo is="true">=</mo><msub is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub></mrow></math> is the strength of links coming to j, and the total strength of the network is 2w=∑ijwij<math><mrow is="true"><mn is="true">2</mn><mi is="true">w</mi><mo is="true">=</mo><msub is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub></mrow></math>. Finally, Ci is the index of the community to which node i belongs to, and δ(x, y) is the Kronecker function assigning 1 only if x = y, and 0 otherwise.
A close look at Eq. (1) reveals that the building block of the community structure we are looking for, within this formulation, is the link between two nodes. Every term in Eq. (1) accounts for the difference, within a module, between the actual existence of a link with weight wij and the probability of existence of such a link just by chance, preserving the strength distribution.
However, in many cases the minimal and functional structural entity of a graph is not a simple link but a small structure (motif) of several nodes [22]. Motifs are small subgraphs that can be found in a network and that correspond to a specific functional pattern of that network. Statistical over-representation of motifs (compared with the random occurrence of these sub-structures) has been a useful technique to determine minimum building blocks of functionality in complex networks, and several works exploit their identification [22], [23], [24]. Among the possible motifs, the simplest one is the triangle which represents the basic unit of transitivity and redundancy in a graph, see Fig. 1. This motif is over-represented in many real networks, for example motifs 12 and 13 in Fig. 1, the feedback with two mutual dyads and the fully connected triad respectively, are characteristic motifs of the WWW. Motif 7 (feed-forward loop) is over-represented in electronic circuits, neurons connectivity and gene regulatory transcription networks. The reason for this over-representation relies on the functionality of such small subgraphs on the evolution and performance of the specific network. In the WWW as well as in social networks, the fully connected triad is probably the result of the transitivity of contents or human relations, respectively. The feed-forward loop is related to the reliability or fail tolerance of the connections between important elements involved in communication chains. The idea we propose here is that finding modules containing such motifs as building blocks could improve our information about the modular structure of complex networks. The importance of transitivity is traced back to the seminal paper [25] where it is proposed the clustering coefficient, a scalar measure quantifying the total number of triangles in a network through the average likelihood that two neighbors of a vertex are neighbors themselves.
The main goal of our work is to determine communities using as building blocks triangular motifs. We propose an approach for triangle community detection based on modularity optimization using the spectral algorithm decomposition and optimization. The resulting algorithm is able to identify efficiently the best partition in communities of triangles of any given network, optimizing their correspondent modularity function.
Let G = (V, A) be a weighted undirected graph representing a complex network, where V represents the vertices set and A the edges set. The objective is to identify communities of triangles, i.e. a partition with the requirement that the density of triangles formed by any three nodes i, j and k inside the same module is larger than the triangles formed outside the module. We will define this objective using a proper adaptation of modularity.
In [26] some of us introduced a mathematical formalism to cope with modularity of motifs of any size. Capitalizing on this work, here we study the specificity of triangle modularity Q▵(C) of a certain partition C of an undirected graph (the extension to directed graphs is straightforward, although a little bit more intricate, we present this extension in the Appendix). The mathematical definition is(2)Q▵(C)=∑i∑j∑kBijkδ(Ci,Cj)δ(Cj,Ck)δ(Ck,Ci),<math><msub is="true"><mrow is="true"><mi is="true">Q</mi></mrow><mrow is="true"><mi is="true">▵</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">C</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mtext is="true">,</mtext></math>where Ci is the index of the community which node i belongs to, and Bijk(3)Bijk=1TGwijwjkwki-1TN(wiwj)(wjwk)(wkwi),<math><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">G</mi></mrow></msub></mrow></mfrac><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">jk</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ki</mi></mrow></msub><mo is="true">-</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">N</mi></mrow></msub></mrow></mfrac><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mtext is="true">,</mtext></math>is a three indices mathematical object (triangle modularity tensor, from now on) that evaluates for each triad i, j, k, the difference between the actual density of strength of the triangle in the graph and the expected density of this triangle in a random configuration with the same strength distribution (null case). The normalization constant TG is the total number of triads of nodes forming triangles in the network,(4)TG=∑i∑j∑kwijwjkwki,<math><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">G</mi></mrow></msub><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">jk</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ki</mi></mrow></msub><mtext is="true">,</mtext></math>and its counterpart TN for the null case term is(5)TN=∑i∑j∑k(wiwj)(wjwk)(wkwi).<math><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">N</mi></mrow></msub><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mtext is="true">.</mtext></math>
It is straightforward to check that the triangle modularity tensor satisfies:(6)Bijk=Bjki=Bkij,<math><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">=</mo><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">jki</mi></mrow></msub><mo is="true">=</mo><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">kij</mi></mrow></msub><mtext is="true">,</mtext></math>(7)∑i∑j∑kBijk=0.<math><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">=</mo><mn is="true">0</mn><mtext is="true">.</mtext></math>
The computation of the triangle modularity is demanding due to the combinatorial number of triads that can be formed. The proposal of any optimization algorithm for this function must be aware of this cost. Among the possibilities already stated in the literature we devise that the spectral optimization scheme, first proposed in [16], is a candidate to perform this task efficiently. The idea behind this algorithm is to use the eigenspectrum of the modularity matrix, which plays a role in community detection similar to that played by the graph Laplacian, and use a recursion splitting reminiscent of graph partitioning calculations. The problem we have is that a direct mapping to the usual spectral modularity optimization is not straightforward given the structure of Eq. (2). Basically we need to transform Eq. (2) in a function with the following structure:(8)Q(C)∝∑i∑jsiMijsj,<math><mi is="true">Q</mi><mo stretchy="false" is="true">(</mo><mi is="true">C</mi><mo stretchy="false" is="true">)</mo><mo is="true">∝</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">M</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mtext is="true">,</mtext></math>where the leading eigenvector of Mij, the modularity matrix, will induce the first recursion step, splitting the network in two parts.
We propose the following transformation: let us assume a partition of the network in two communities, introducing the variables si, which are +1 or −1 depending on the community to which node i belongs to, and taking into account that(9)δ(Ci,Cj)=12(1+sisj),<math><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><mn is="true">2</mn></mrow></mfrac><mo stretchy="false" is="true">(</mo><mn is="true">1</mn><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mtext is="true">,</mtext></math>then(10)δ(Ci,Cj)δ(Cj,Ck)δ(Ck,Ci)=18(1+sisj)(1+sjsk)(1+sksi)=14(1+sisj+sjsk+sksi),<math><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><mn is="true">8</mn></mrow></mfrac><mo stretchy="false" is="true">(</mo><mn is="true">1</mn><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo stretchy="false" is="true">(</mo><mn is="true">1</mn><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo stretchy="false" is="true">(</mo><mn is="true">1</mn><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><mn is="true">4</mn></mrow></mfrac><mo stretchy="false" is="true">(</mo><mn is="true">1</mn><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mtext is="true">,</mtext></math>where we have made use of si2=+1<math><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mn is="true">2</mn></mrow></msubsup><mo is="true">=</mo><mo is="true">+</mo><mn is="true">1</mn></mrow></math>. Therefore, using Eqs. (6), (7),(11)Q▵(S)=14∑i∑j∑kBijk(1+sisj+sjsk+sksi)=34∑i∑j∑kBijksisj.<math><msub is="true"><mrow is="true"><mi is="true">Q</mi></mrow><mrow is="true"><mi is="true">▵</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">S</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><mn is="true">4</mn></mrow></mfrac><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mn is="true">1</mn><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">3</mn></mrow><mrow is="true"><mn is="true">4</mn></mrow></mfrac><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mtext is="true">.</mtext></math>
Defining the triangle modularity matrix(12)Mij=∑kBijk=1TGwij∑kwjkwki-1TN(wiwi)(wjwj)∑k(wkwk),<math><msub is="true"><mrow is="true"><mi is="true">M</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">G</mi></mrow></msub></mrow></mfrac><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">jk</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ki</mi></mrow></msub><mo is="true">-</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">N</mi></mrow></msub></mrow></mfrac><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo stretchy="false" is="true">)</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mtext is="true">,</mtext></math>then(13)Q▵(S)=34∑i∑jsiMijsj.<math><msub is="true"><mrow is="true"><mi is="true">Q</mi></mrow><mrow is="true"><mi is="true">▵</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">S</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">3</mn></mrow><mrow is="true"><mn is="true">4</mn></mrow></mfrac><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">M</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mtext is="true">.</mtext></math>
Thus, we have been able to reduce the optimization of the triangle modularity into the standard spectral algorithm given in [16].
For the case of undirected networks, this matrix is symmetric and the computation of its eigenspectra gives real values. However, if the network is directed, this property is not necessarily true, and then a symmetrization of the matrix is needed before computing its spectrum (see Appendix).
Once a first division of the network in two parts has been obtained, it is possible to iterate the process, while modularity improves, by a recursive application of the spectral splitting to each subgraph. To this end, we need the value of the triangle modularity matrix for any subgraph. Supposing we have a subgraph g to be divided into g1 and g2, the change in triangle modularity is given by(14)ΔQ▵(g→g1,g2)=∑i,j,k∈g1Bijk+∑i,j,k∈g2Bijk-∑i,j,k∈gBijk=34∑k∈g∑i,j∈gBijksisj-∑i,j∈gBijk=34∑i,j∈gsiMij(g)sj,<math><mi mathvariant="normal" is="true">Δ</mi><msub is="true"><mrow is="true"><mi is="true">Q</mi></mrow><mrow is="true"><mi is="true">▵</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">g</mi><mo is="true">→</mo><msub is="true"><mrow is="true"><mi is="true">g</mi></mrow><mrow is="true"><mn is="true">1</mn></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">g</mi></mrow><mrow is="true"><mn is="true">2</mn></mrow></msub><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi><mtext is="true">,</mtext><mi is="true">j</mi><mtext is="true">,</mtext><mi is="true">k</mi><mo is="true">∈</mo><msub is="true"><mrow is="true"><mi is="true">g</mi></mrow><mrow is="true"><mn is="true">1</mn></mrow></msub></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">+</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi><mtext is="true">,</mtext><mi is="true">j</mi><mtext is="true">,</mtext><mi is="true">k</mi><mo is="true">∈</mo><msub is="true"><mrow is="true"><mi is="true">g</mi></mrow><mrow is="true"><mn is="true">2</mn></mrow></msub></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">-</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi><mtext is="true">,</mtext><mi is="true">j</mi><mtext is="true">,</mtext><mi is="true">k</mi><mo is="true">∈</mo><mi is="true">g</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">3</mn></mrow><mrow is="true"><mn is="true">4</mn></mrow></mfrac><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi><mo is="true">∈</mo><mi is="true">g</mi></mrow></munder><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi><mtext is="true">,</mtext><mi is="true">j</mi><mo is="true">∈</mo><mi is="true">g</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo is="true">-</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi><mtext is="true">,</mtext><mi is="true">j</mi><mo is="true">∈</mo><mi is="true">g</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub></mrow></mfenced></mrow><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">3</mn></mrow><mrow is="true"><mn is="true">4</mn></mrow></mfrac><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi><mtext is="true">,</mtext><mi is="true">j</mi><mo is="true">∈</mo><mi is="true">g</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">M</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">g</mi><mo stretchy="false" is="true">)</mo><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mtext is="true">,</mtext></math>where(15)Mij(g)=∑k∈gBijk-δij∑ℓ∈gBiℓk,<math><msub is="true"><mrow is="true"><mi is="true">M</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">g</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi><mo is="true">∈</mo><mi is="true">g</mi></mrow></munder><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">-</mo><msub is="true"><mrow is="true"><mi is="true">δ</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">ℓ</mi><mo is="true">∈</mo><mi is="true">g</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi is="true">i</mi><mi is="true">ℓ</mi><mi is="true">k</mi></mrow></msub></mrow></mfenced></mrow><mtext is="true">,</mtext></math>and si is +1 for nodes in g1 and −1 for nodes in g2. Therefore, the new triangle modularity matrix is not just a submatrix of the original one, but additional terms appear to take into account the connectivity with the rest of the network.
Once the triangle modularity has been transformed to the proper form to be optimized by spectral decomposition, we can proceed to formulate a complete decomposition-optimization algorithm. After the first analysis of the eigenspectra, the eigenvector associated to the largest eigenvalue is used to determine the elements that will be assigned to one of the two communties according to the sign of their eigenvector component. This process is recursively executed until no new splits are obtained. The decomposition given by the spectral partitioning can be improved by a fine-tuning of the nodes asignments after the process ends.
We use the Kernighan–Lin optimization method to improve the modularity as explained in [16]. The main idea is to move vertices in a group to another increasing the modularity. We move all vertices exactly once. At each step, we choose to move the vertex giving the best improvement (largest increase in the modularity). When all vertices are moved, we repeat the process until no improvement is possible. Some computational issues should be considered here: the computation of the largest eigenvalue and its corresponding eigenvector can be efficiently determined using the iterative Lanczos method [27]; the computation of Q▵(S) is, in principle, of order O(N3), however it can be done very efficiently by pre-computing and storing the values of TN and TG, and the lists of triangles to which each node belongs to; finally, the KL post-processing stage which is eventually the computational bottleneck of the process, must be parameterized according to the number of nodes we pretend to move and the relative improvement of modularity observed.Algorithm 1: Triangle community detectionRequire: Connected network G(V, E)Ensure: Triangle communities C, Triangle modularity of the partition Q▵(C)1: Read network2: Current subgraph g ← G3: Build modularity matrix M(g)4: Compute Q▵(g)5: Compute leading eigenvalue and eigenvector of M(g)6: Decomposition of group g in two groups: g1 and g2, using the signs of eigenvector components7: Compute the modularity Q▵(g1, g2) of the initial split of group g8: Improve Q▵(g1, g2) using KL optimization between g1 and g29: Compute the modularity Q▵(g1, g2) of the split of group g10: if Q▵(g1, g2) > Q▵(g) then11: goto 3 with g ← g112: goto 3 with g ← g213: end if
In this section we show the results of the algorithm, applied to several real networks. We have used the following networks:
Football [1], a network of American football games between Division IA colleges during regular season Fall 2000.
Zachary [28], a social network of friendships between 34 members of a karate club at a US university in the 1970s.
Dolphins [29], an undirected social network of frequent associations between 62 dolphins in a community living off Doubtful Sound, New Zealand.
Adjnoun [30], adjacency network of common adjectives and nouns in the novel David Copperfield by Charles Dickens.
Elec s208 [22], benchmark of sequential logic electronic circuit.
Neurons [31], network of neural connectivity of the nematode C. elegans.
Cortex [32], network of connections between cortical areas in the cat brain.
To evaluate the information provided by the new triangle modularity, we perform a comparison with the standard modularity Eq. (1). We have developed a comparison in both the values of the optimal modularity, and the partitions obtained.
Table 1 shows the best standard, and triangle modularities found using spectral optimization. We define a new parameter Δ(Q, Q▵) = (Q▵ − Q)/Q that measures the relative difference between both. Positive values of Δ(Q, Q▵) indicate that the contribution of triangles to communities is larger than standard modularity communities, and the contrary for negative values.
From Table 1 we observe that in Adjnoun, which is almost a bipartite network, the standard modularity is larger than the triangle modularity, in accordance with the absence of these motifs. On the other side, for the Zachary network, a human social network where transitivity is implicit in many acquaintances, the triangle modularity becomes more informative than the standard modularity. Indeed, the optimal standard modularity proposes a decomposition of this network in four groups, while the optimal triangle modularity is achieved for a partition in two groups plus two isolated nodes (nodes 10 and 12) that do not participate in any triangle. Moreover the partition in two groups is in accordance with the observed split of this network after a fight between the administrator and the instructor of the club, see Fig. 2.
A deeper comparison consists of analyzing the different modules obtained using the standard and triangle modularity. To this end, we need some measures to analyze the difference in the assignments of nodes to modules, taking into account that we will also have different modular partitions. Here, we use two measures, the Normalized Mutual Information (NMI) and the asymmetric Wallace index (AW).
In [33] the authors define the NMI to compare two clusterings. The idea is the following: let be a clustering A with cA communities and a clustering B with cB communities, and let us define the confusion matrix N whose rows correspond to the communities of the first clustering (A) and columns correspond to the communities of second clustering (B). The elements of the confusion matrix, Nαβ, represent the number of common nodes between community α of the clustering A and community β of the clustering B, the partial sums Nα.=∑βNαβ<math><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">.</mo></mrow></msub><mo is="true">=</mo><msub is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">β</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mi is="true">β</mi></mrow></msub></mrow></math> and N.β=∑αNαβ<math><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mo is="true">.</mo><mi is="true">β</mi></mrow></msub><mo is="true">=</mo><msub is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">α</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mi is="true">β</mi></mrow></msub></mrow></math> are the sizes of these communities, and N..=∑α∑βNαβ<math><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mo is="true">.</mo><mo is="true">.</mo></mrow></msub><mo is="true">=</mo><msub is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">α</mi></mrow></msub><msub is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">β</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mi is="true">β</mi></mrow></msub></mrow></math> is the total number of nodes. The measure NMI between two clusterings A and B is(16)NMI(A,B)=-2∑α=1cA∑β=1cBNαβlogNαβN..Nα.N.β∑α=1cANα.logNα.N..+∑β=1cBN.βlogN.βN...<math><mi mathvariant="normal" is="true">NMI</mi><mo stretchy="false" is="true">(</mo><mi is="true">A</mi><mtext is="true">,</mtext><mi is="true">B</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mo is="true">-</mo><mn is="true">2</mn><msubsup is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">c</mi></mrow><mrow is="true"><mi is="true">A</mi></mrow></msub></mrow></msubsup><msubsup is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">β</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">c</mi></mrow><mrow is="true"><mi is="true">B</mi></mrow></msub></mrow></msubsup><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mi is="true">β</mi></mrow></msub><mi mathvariant="normal" is="true">log</mi><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><mfrac is="true"><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mi is="true">β</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mo is="true">.</mo><mo is="true">.</mo></mrow></msub></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">.</mo></mrow></msub><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mo is="true">.</mo><mi is="true">β</mi></mrow></msub></mrow></mfrac></mrow></mfenced></mrow></mrow><mrow is="true"><msubsup is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">c</mi></mrow><mrow is="true"><mi is="true">A</mi></mrow></msub></mrow></msubsup><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">.</mo></mrow></msub><mi mathvariant="normal" is="true">log</mi><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><mfrac is="true"><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">.</mo></mrow></msub></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mo is="true">.</mo><mo is="true">.</mo></mrow></msub></mrow></mfrac></mrow></mfenced></mrow><mo is="true">+</mo><munderover is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">β</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">c</mi></mrow><mrow is="true"><mi is="true">B</mi></mrow></msub></mrow></munderover><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mo is="true">.</mo><mi is="true">β</mi></mrow></msub><mi mathvariant="normal" is="true">log</mi><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><mfrac is="true"><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mo is="true">.</mo><mi is="true">β</mi></mrow></msub></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mo is="true">.</mo><mo is="true">.</mo></mrow></msub></mrow></mfrac></mrow></mfenced></mrow></mrow></mfrac><mtext is="true">.</mtext></math>
If the partitions are identical, then NMI takes its maximum value of 1. If the partitions are totally independent, NMI = 0. It measures the amount of information that both partitions have in common.
The asymmetric Wallace index [34] is the probability that a pair of elements in one cluster of partition A (resp. B) is also in the same cluster of partition B (resp. A). Using the same definitions as for the NMI, the two possible asymmetric Wallace indices are:(17)AW1(A,B)=∑α=1cA∑β=1cBNαβ(Nαβ-1)∑α=1cANα.(Nα.-1),<math><msub is="true"><mrow is="true"><mi mathvariant="normal" is="true">AW</mi></mrow><mrow is="true"><mn is="true">1</mn></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">A</mi><mtext is="true">,</mtext><mi is="true">B</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">c</mi></mrow><mrow is="true"><mi is="true">A</mi></mrow></msub></mrow></msubsup><msubsup is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">β</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">c</mi></mrow><mrow is="true"><mi is="true">B</mi></mrow></msub></mrow></msubsup><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mi is="true">β</mi></mrow></msub><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mi is="true">β</mi></mrow></msub><mo is="true">-</mo><mn is="true">1</mn><mo stretchy="false" is="true">)</mo></mrow><mrow is="true"><msubsup is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">c</mi></mrow><mrow is="true"><mi is="true">A</mi></mrow></msub></mrow></msubsup><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">.</mo></mrow></msub><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">.</mo></mrow></msub><mo is="true">-</mo><mn is="true">1</mn><mo stretchy="false" is="true">)</mo></mrow></mfrac><mtext is="true">,</mtext></math>(18)AW2(A,B)=∑α=1cA∑β=1cBNαβ(Nαβ-1)∑β=1cBN.β(N.β-1).<math><msub is="true"><mrow is="true"><mi mathvariant="normal" is="true">AW</mi></mrow><mrow is="true"><mn is="true">2</mn></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">A</mi><mtext is="true">,</mtext><mi is="true">B</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">α</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">c</mi></mrow><mrow is="true"><mi is="true">A</mi></mrow></msub></mrow></msubsup><msubsup is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">β</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">c</mi></mrow><mrow is="true"><mi is="true">B</mi></mrow></msub></mrow></msubsup><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mi is="true">β</mi></mrow></msub><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mi is="true">α</mi><mi is="true">β</mi></mrow></msub><mo is="true">-</mo><mn is="true">1</mn><mo stretchy="false" is="true">)</mo></mrow><mrow is="true"><msubsup is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">β</mi><mo is="true">=</mo><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">c</mi></mrow><mrow is="true"><mi is="true">B</mi></mrow></msub></mrow></msubsup><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mo is="true">.</mo><mi is="true">β</mi></mrow></msub><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">N</mi></mrow><mrow is="true"><mo is="true">.</mo><mi is="true">β</mi></mrow></msub><mo is="true">-</mo><mn is="true">1</mn><mo stretchy="false" is="true">)</mo></mrow></mfrac><mtext is="true">.</mtext></math>
The asymmetric Wallace index shows the inclusion of a partition in the other.
In Table 2, we observe that the largest NMI is for the communities of football network. That means that the standard and triangle communities found in that network are very similar. Indeed, the structure of the football network is very dense and almost all nodes participate in triangles. For the AW2 of the cortex network is equal to 1, that means that all the triangle communities are included in the standard ones.
We have designed an algorithm to compute the communities of triangular motifs using a spectral decomposition of the triangle modularity matrix. The algorithm provides partitions where transitive relations are the building blocks of their internal structure. The results of these partitions are complementary to those obtained maximizing the classical modularity, that accounts only for individual links, and can be used to improve our knowledge of the mesoscopic structure of complex networks.
The authors acknowledge J. Borge-Holthoefer and A. Fernández for useful discussions. This work was supported by Spanish Ministry of Science and Technology FIS2009-13730-C02-02 and the Generalitat de Catalunya SGR-00838-2009. B.S. acknowledges support from he Rhone-Alpes region for the financing of training by Explora’doc exchange scholarship.
Here we show the computation of the triangle modularity matrix for a directed motif, in particular motif 7 in Fig. 1, although as will be shown the process is equivalent for any other motif configuration. In this case, we have(19)Q▵(C)=∑i∑j∑kBijkδ(Ci,Cj)δ(Cj,Ck)δ(Ck,Ci),<math><msub is="true"><mrow is="true"><mi is="true">Q</mi></mrow><mrow is="true"><mi is="true">▵</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">C</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mi is="true">δ</mi><mo stretchy="false" is="true">(</mo><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow></msub><mtext is="true">,</mtext><msub is="true"><mrow is="true"><mi is="true">C</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><mo stretchy="false" is="true">)</mo><mtext is="true">,</mtext></math>where Bijk is(20)Bijk=1TGwijwjkwki-1TN(wioutwjin)(wjoutwkin)(wkoutwiin).<math><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">G</mi></mrow></msub></mrow></mfrac><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">jk</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ki</mi></mrow></msub><mo is="true">-</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">N</mi></mrow></msub></mrow></mfrac><mo stretchy="false" is="true">(</mo><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup><mo stretchy="false" is="true">)</mo><mo stretchy="false" is="true">(</mo><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup><mo stretchy="false" is="true">)</mo><mo stretchy="false" is="true">(</mo><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup><mo stretchy="false" is="true">)</mo><mtext is="true">.</mtext></math>
The normalization constant TG is now(21)TG=∑i∑j∑kwijwjkwki,<math><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">G</mi></mrow></msub><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">jk</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ki</mi></mrow></msub><mtext is="true">,</mtext></math>and(22)TN=∑i∑j∑kwioutwjinwjoutwkinwkoutwiin.<math><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">N</mi></mrow></msub><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mtext is="true">.</mtext></math>
Using the transformation proposed in Eq. (10)(23)Mij=∑kBijk=1TGwij∑kwjkwki-1TNwioutwiinwjoutwjin∑kwkoutwkin.<math><msub is="true"><mrow is="true"><mi is="true">M</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">G</mi></mrow></msub></mrow></mfrac><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">jk</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ki</mi></mrow></msub><mo is="true">-</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">N</mi></mrow></msub></mrow></mfrac><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mtext is="true">.</mtext></math>then(24)Q▵(S)=34∑i∑jsiMijsj.<math><msub is="true"><mrow is="true"><mi is="true">Q</mi></mrow><mrow is="true"><mi is="true">▵</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">S</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">3</mn></mrow><mrow is="true"><mn is="true">4</mn></mrow></mfrac><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">M</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mtext is="true">.</mtext></math>
Owing to the fact that the graph is directed, the modularity matrix Mij may be not symmetric, which causes technical problems. However, it is possible to restore the symmetry thanks to the scalar nature of Q▵(S) [35]. A symmetrization of the triangle modularity matrix M,(25)M′=12M+MT<math><msup is="true"><mrow is="true"><mi is="true">M</mi></mrow><mrow is="true"><mo is="true">′</mo></mrow></msup><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><mn is="true">2</mn></mrow></mfrac><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><mi is="true">M</mi><mo is="true">+</mo><msup is="true"><mrow is="true"><mi is="true">M</mi></mrow><mrow is="true"><mi is="true">T</mi></mrow></msup></mrow></mfenced></mrow></math>yields(26)Q▵(S)=12Q▵(S)+Q▵(S)T=34∑i∑jsiMij′sj,<math><msub is="true"><mrow is="true"><mi is="true">Q</mi></mrow><mrow is="true"><mi is="true">▵</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">S</mi><mo stretchy="false" is="true">)</mo><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><mn is="true">2</mn></mrow></mfrac><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">Q</mi></mrow><mrow is="true"><mi is="true">▵</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">S</mi><mo stretchy="false" is="true">)</mo><mo is="true">+</mo><msub is="true"><mrow is="true"><mi is="true">Q</mi></mrow><mrow is="true"><mi is="true">▵</mi></mrow></msub><mo stretchy="false" is="true">(</mo><mi is="true">S</mi><msup is="true"><mrow is="true"><mo stretchy="false" is="true">)</mo></mrow><mrow is="true"><mi is="true">T</mi></mrow></msup></mrow></mfenced></mrow><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">3</mn></mrow><mrow is="true"><mn is="true">4</mn></mrow></mfrac><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow></msub><msubsup is="true"><mrow is="true"><mi is="true">M</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow><mrow is="true"><mo is="true">′</mo></mrow></msubsup><msub is="true"><mrow is="true"><mi is="true">s</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow></msub><mtext is="true">,</mtext></math>recovering the necessary symmetry to apply the standard spectral optimization.
In the same manner, we can define the modularity matrix for all possible motifs of Fig. 1 just by modifying Bijk. For example, for motif 13 in Fig. 1 we have:(27)Bijk=1TGwijwjiwjkwkjwkiwik-1TNwiout2wjin2wjout2wkin2wkout2wiin2,<math><msub is="true"><mrow is="true"><mi is="true">B</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ijk</mi></mrow></msub><mo is="true">=</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">G</mi></mrow></msub></mrow></mfrac><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ji</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">jk</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">kj</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ki</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ik</mi></mrow></msub><mo is="true">-</mo><mfrac is="true"><mrow is="true"><mn is="true">1</mn></mrow><mrow is="true"><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">N</mi></mrow></msub></mrow></mfrac><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><mtext is="true">,</mtext></math>(28)TG=∑i∑j∑kwijwjiwjkwkjwkiwik,<math><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">G</mi></mrow></msub><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ij</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ji</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">jk</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">kj</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ki</mi></mrow></msub><msub is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi mathvariant="italic" is="true">ik</mi></mrow></msub><mtext is="true">,</mtext></math>(29)TN=∑i∑j∑k(wiout)2wjin2wjout2wkin2wkout2wiin2.<math><msub is="true"><mrow is="true"><mi is="true">T</mi></mrow><mrow is="true"><mi is="true">N</mi></mrow></msub><mo is="true">=</mo><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">i</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">j</mi></mrow></munder><munder is="true"><mrow is="true"><mo is="true">∑</mo></mrow><mrow is="true"><mi is="true">k</mi></mrow></munder><mo stretchy="false" is="true">(</mo><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup><msup is="true"><mrow is="true"><mo stretchy="false" is="true">)</mo></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">j</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">k</mi></mrow><mrow is="true"><mtext is="true">out</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><msup is="true"><mrow is="true"><mfenced open="(" close=")" is="true"><mrow is="true"><msubsup is="true"><mrow is="true"><mi is="true">w</mi></mrow><mrow is="true"><mi is="true">i</mi></mrow><mrow is="true"><mtext is="true">in</mtext></mrow></msubsup></mrow></mfenced></mrow><mrow is="true"><mn is="true">2</mn></mrow></msup><mtext is="true">.</mtext></math>